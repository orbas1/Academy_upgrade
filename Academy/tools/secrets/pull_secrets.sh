#!/usr/bin/env bash
set -euo pipefail

usage() {
  cat <<USAGE
Usage: $0 [--env=<environment>] [--output=<path>]

Fetches application secrets from the configured secret manager and writes
an .env-compatible file.

Environment variables:
  SECRETS_MANAGER_DRIVER   Provider to query (aws|gcp|vault). Default: aws
  SECRETS_MANAGER_PATH     Base secret identifier. Overrides provider defaults.
USAGE
}

ENVIRONMENT="${APP_ENV:-staging}"
OUTPUT_FILE=".env"

for arg in "$@"; do
  case "$arg" in
    --env=*)
      ENVIRONMENT="${arg#*=}"
      shift
      ;;
    --output=*)
      OUTPUT_FILE="${arg#*=}"
      shift
      ;;
    --help)
      usage
      exit 0
      ;;
    *)
      echo "Unknown argument: $arg" >&2
      usage
      exit 1
      ;;
  esac
done

DRIVER="${SECRETS_MANAGER_DRIVER:-aws}"
SECRET_PATH="${SECRETS_MANAGER_PATH:-academy/${ENVIRONMENT}/laravel}"

fetch_from_aws() {
  command -v aws >/dev/null 2>&1 || {
    echo "aws CLI not found. Install awscli v2 and authenticate before running." >&2
    exit 2
  }

  aws secretsmanager get-secret-value \
    --secret-id "$SECRET_PATH" \
    --query 'SecretString' \
    --output text
}

fetch_from_gcp() {
  command -v gcloud >/dev/null 2>&1 || {
    echo "gcloud CLI not found. Install Google Cloud SDK and authenticate before running." >&2
    exit 2
  }

  gcloud secrets versions access latest \
    --secret="$SECRET_PATH" \
    --format='get(payload.data)' |
    python3 -c 'import base64,sys;print(base64.b64decode(sys.stdin.read()).decode())'
}

fetch_from_vault() {
  command -v vault >/dev/null 2>&1 || {
    echo "HashiCorp Vault CLI not found. Install vault and authenticate before running." >&2
    exit 2
  }

  vault kv get -format=json "$SECRET_PATH" |
    jq -r '.data.data | to_entries[] | "\(.key)=\(.value)"'
}

case "$DRIVER" in
  aws)
    SECRET_PAYLOAD="$(fetch_from_aws)"
    ;;
  gcp)
    SECRET_PAYLOAD="$(fetch_from_gcp)"
    ;;
  vault)
    SECRET_PAYLOAD="$(fetch_from_vault)"
    ;;
  *)
    echo "Unsupported secrets driver: $DRIVER" >&2
    exit 3
    ;;
 esac

cat >"$OUTPUT_FILE" <<FILE
# Generated by tools/secrets/pull_secrets.sh for $ENVIRONMENT on $(date -u +%Y-%m-%dT%H:%M:%SZ)
$SECRET_PAYLOAD
FILE

echo "Secrets written to $OUTPUT_FILE" >&2

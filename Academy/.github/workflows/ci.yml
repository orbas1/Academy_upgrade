name: Academy CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

concurrency:
  group: academy-${{ github.ref }}
  cancel-in-progress: true

env:
  PHP_VERSION: '8.3'
  NODE_VERSION: '20'
  FLUTTER_VERSION: '3.24.0'
  WORKING_DIRECTORY_BACKEND: Web_Application/Academy-LMS
  WORKING_DIRECTORY_MOBILE: 'Student Mobile APP/academy_lms_app'

jobs:
  policy_guard:
    name: Branch Policy Gate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Enforce branch policy
        run: php $GITHUB_WORKSPACE/tools/ci/enforce_branch_policy.php

  backend_lint:
    name: Backend Lint & Static Style
    runs-on: ubuntu-latest
    needs: policy_guard
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY_BACKEND }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, intl, redis, pdo_mysql
          coverage: none
      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.composer/cache
          key: composer-${{ runner.os }}-${{ env.PHP_VERSION }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            composer-${{ runner.os }}-${{ env.PHP_VERSION }}-
      - name: Install dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader
      - name: Run Pint
        run: vendor/bin/pint --test
      - name: Validate Composer config
        run: composer validate --strict

  backend_tests:
    name: Backend Unit & Feature Tests
    runs-on: ubuntu-latest
    needs: backend_lint
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY_BACKEND }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, intl, redis, pdo_mysql
          coverage: xdebug
          ini-values: "memory_limit=1G"
      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.composer/cache
          key: composer-${{ runner.os }}-${{ env.PHP_VERSION }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            composer-${{ runner.os }}-${{ env.PHP_VERSION }}-
      - name: Install dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader
      - name: Copy environment
        run: |
          cp .env.example .env.testing
          php artisan key:generate --env=testing
      - name: Run PHPUnit suites with coverage
        run: |
          mkdir -p build/coverage
          php artisan test --log-junit=junit.xml --coverage-clover=build/coverage/clover.xml --coverage-text=build/coverage/phpunit-coverage.txt
          php $GITHUB_WORKSPACE/tools/ci/enforce_php_coverage.php build/coverage/clover.xml 75 build/coverage/summary.json
      - name: Upload PHPUnit report
        uses: actions/upload-artifact@v4
        with:
          name: backend-junit
          path: ${{ env.WORKING_DIRECTORY_BACKEND }}/junit.xml
      - name: Upload backend coverage summary
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-summary
          path: ${{ env.WORKING_DIRECTORY_BACKEND }}/build/coverage/summary.json
      - name: PHPStan Static Analysis
        run: vendor/bin/phpstan analyse --memory-limit=1G
      - name: Larastan Domain Analysis
        run: vendor/bin/larastan analyse --level=6 app database routes

  backend_dusk:
    name: Backend Browser E2E (Dusk)
    runs-on: ubuntu-latest
    needs: backend_tests
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY_BACKEND }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, intl, sqlite3
          ini-values: "memory_limit=1G"
      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.composer/cache
          key: composer-${{ runner.os }}-${{ env.PHP_VERSION }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            composer-${{ runner.os }}-${{ env.PHP_VERSION }}-
      - name: Install dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader
      - name: Prepare Dusk environment
        run: |
          cp .env.dusk.ci .env
          touch /tmp/academy_dusk.sqlite
          php artisan key:generate --env=dusk.ci --force
          php artisan migrate --env=dusk.ci --force
      - name: Install Chrome
        uses: browser-actions/setup-chrome@v1
      - name: Ensure ChromeDriver matches Chrome
        run: php artisan dusk:chrome-driver --detect
      - name: Run Laravel Dusk suite
        env:
          APP_ENV: dusk.ci
        run: php artisan dusk --env=dusk.ci --without-tty
      - name: Upload Dusk artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dusk-artifacts
          path: |
            ${{ env.WORKING_DIRECTORY_BACKEND }}/tests/Browser/screenshots
            ${{ env.WORKING_DIRECTORY_BACKEND }}/tests/Browser/console

  frontend_build:
    name: Frontend Build Verification
    runs-on: ubuntu-latest
    needs: backend_dusk
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY_BACKEND }}
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY_BACKEND }}/package-lock.json
      - name: Install Node dependencies
        run: npm ci
      - name: Build Vite assets
        run: npm run build -- --mode=production
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: ${{ env.WORKING_DIRECTORY_BACKEND }}/public/build

  security_scans:
    name: Dependency Security Scans
    runs-on: ubuntu-latest
    needs: backend_tests
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY_BACKEND }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, intl
      - name: Composer Audit
        run: composer audit --locked --ansi
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY_BACKEND }}/package-lock.json
      - name: Install dependencies for audit
        run: npm ci --prefer-offline
      - name: npm Audit
        run: npm audit --audit-level=critical

  infra_scan:
    name: Infrastructure Policy Scan
    runs-on: ubuntu-latest
    needs: backend_tests
    steps:
      - uses: actions/checkout@v4
      - name: Trivy config scan
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: config
          format: sarif
          output: trivy.sarif
          scan-ref: infra
      - name: Upload Trivy Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-infra-report
          path: trivy.sarif

  flutter_tests:
    name: Flutter Analyze & Tests
    runs-on: ubuntu-latest
    needs: frontend_build
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY_MOBILE }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Flutter ${{ env.FLUTTER_VERSION }}
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
      - name: Flutter pub get
        run: flutter pub get
      - name: Flutter format check
        run: flutter format --set-exit-if-changed lib test
      - name: Flutter analyze
        run: flutter analyze
      - name: Prepare test report directory
        run: mkdir -p build
      - name: Flutter tests with coverage
        run: |
          flutter test --machine --coverage > build/test_output.json
          python $GITHUB_WORKSPACE/tools/ci/enforce_lcov_coverage.py coverage/lcov.info 80 coverage/summary.json
      - name: Upload Flutter test report
        uses: actions/upload-artifact@v4
        with:
          name: flutter-test-report
          path: ${{ env.WORKING_DIRECTORY_MOBILE }}/build/test_output.json
      - name: Upload Flutter coverage summary
        uses: actions/upload-artifact@v4
        with:
          name: flutter-coverage-summary
          path: ${{ env.WORKING_DIRECTORY_MOBILE }}/coverage/summary.json

  flutter_android:
    name: Flutter Android Bundle
    runs-on: ubuntu-latest
    needs: flutter_tests
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY_MOBILE }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Flutter ${{ env.FLUTTER_VERSION }}
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
      - name: Flutter pub get
        run: flutter pub get
      - name: Build staging appbundle
        run: flutter build appbundle --flavor staging --target lib/main.dart --dart-define=ACADEMY_APP_ENV=staging --dart-define=ACADEMY_API_BASE_URL=https://staging.api.academy.example --dart-define=ACADEMY_COMMUNITY_MANIFEST_URL=https://staging.api.academy.example/v1/admin/communities/modules
      - name: Upload Android bundle
        uses: actions/upload-artifact@v4
        with:
          name: flutter-android-staging
          path: ${{ env.WORKING_DIRECTORY_MOBILE }}/build/app/outputs/bundle/stagingRelease/*.aab

  flutter_ios:
    name: Flutter iOS IPA
    runs-on: macos-latest
    needs: flutter_tests
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY_MOBILE }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Flutter ${{ env.FLUTTER_VERSION }}
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
      - name: Flutter pub get
        run: flutter pub get
      - name: Build iOS IPA (no codesign)
        run: flutter build ipa --export-options-plist ios/ExportOptions.plist --no-codesign --dart-define=ACADEMY_APP_ENV=staging --dart-define=ACADEMY_API_BASE_URL=https://staging.api.academy.example --dart-define=ACADEMY_COMMUNITY_MANIFEST_URL=https://staging.api.academy.example/v1/admin/communities/modules
      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: flutter-ios-staging
          path: ${{ env.WORKING_DIRECTORY_MOBILE }}/build/ios/ipa/*.ipa

  quality_gates:
    name: Quality Gates Summary
    runs-on: ubuntu-latest
    needs:
      - backend_tests
      - flutter_tests
      - security_scans
      - infra_scan
    if: ${{ always() }}
    steps:
      - name: Download backend coverage summary
        if: ${{ needs.backend_tests.result == 'success' }}
        uses: actions/download-artifact@v4
        with:
          name: backend-coverage-summary
          path: coverage/backend
      - name: Download Flutter coverage summary
        if: ${{ needs.flutter_tests.result == 'success' }}
        uses: actions/download-artifact@v4
        with:
          name: flutter-coverage-summary
          path: coverage/flutter
      - name: Compose quality gate summary
        id: compose
        uses: actions/github-script@v7
        env:
          BACKEND_STATUS: ${{ needs.backend_tests.result }}
          FLUTTER_STATUS: ${{ needs.flutter_tests.result }}
          SECURITY_STATUS: ${{ needs.security_scans.result }}
          INFRA_STATUS: ${{ needs.infra_scan.result }}
        with:
          script: |
            const core = require('@actions/core');
            const fs = require('fs');
            const path = require('path');

            function readSummary(location) {
              if (!location || !fs.existsSync(location)) {
                return null;
              }
              return JSON.parse(fs.readFileSync(location, 'utf8'));
            }

            const parseNumber = (value) => {
              if (value === null || value === undefined || value === '') {
                return null;
              }
              const parsed = Number(value);
              return Number.isFinite(parsed) ? parsed : null;
            };

            const backendSummary = readSummary(path.join('coverage', 'backend', 'summary.json'));
            const flutterSummary = readSummary(path.join('coverage', 'flutter', 'summary.json'));

            const backendCoverage = parseNumber(backendSummary?.coverage?.line ?? null);
            const backendThreshold = parseNumber(backendSummary?.thresholds?.line ?? null);
            const flutterCoverage = parseNumber(flutterSummary?.coverage?.line ?? null);
            const flutterThreshold = parseNumber(flutterSummary?.thresholds?.line ?? null);

            const result = {
              backend: {
                status: process.env.BACKEND_STATUS,
                coverage: backendCoverage,
                threshold: backendThreshold,
              },
              flutter: {
                status: process.env.FLUTTER_STATUS,
                coverage: flutterCoverage,
                threshold: flutterThreshold,
              },
              security: { status: process.env.SECURITY_STATUS },
              infrastructure: { status: process.env.INFRA_STATUS },
            };

            fs.mkdirSync('coverage', { recursive: true });
            fs.writeFileSync('coverage/quality-gates-summary.json', JSON.stringify(result, null, 2));

            if (result.backend.coverage !== null) {
              core.setOutput('backendCoverage', result.backend.coverage.toFixed(2));
            }
            if (result.backend.threshold !== null) {
              core.setOutput('backendThreshold', result.backend.threshold.toFixed(2));
            }
            if (result.flutter.coverage !== null) {
              core.setOutput('flutterCoverage', result.flutter.coverage.toFixed(2));
            }
            if (result.flutter.threshold !== null) {
              core.setOutput('flutterThreshold', result.flutter.threshold.toFixed(2));
            }
            core.setOutput('backendStatus', result.backend.status);
            core.setOutput('flutterStatus', result.flutter.status);
            core.setOutput('securityStatus', result.security.status);
            core.setOutput('infraStatus', result.infrastructure.status);
      - name: Upload quality gates summary
        uses: actions/upload-artifact@v4
        with:
          name: quality-gates-summary
          path: coverage/quality-gates-summary.json
      - name: Publish pull request quality comment
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const core = require('@actions/core');
            const github = require('@actions/github');
            const context = github.context;
            const fs = require('fs');
            const summary = JSON.parse(fs.readFileSync('coverage/quality-gates-summary.json', 'utf8'));
            const statusIcon = (status) => {
              if (status === 'success') return '✅';
              if (status === 'skipped') return '⚪️';
              if (status === 'cancelled') return '⚪️';
              return '❌';
            };

            function line(label, segment) {
              const coverage = segment.coverage !== null && segment.threshold !== null
                ? ` — ${segment.coverage.toFixed(2)}% (min ${segment.threshold.toFixed(2)}%)`
                : '';
              return `${statusIcon(segment.status)} **${label}**${coverage}`;
            }

            const body = `<!-- quality-gates -->\n### Quality Gates\n${line('Backend', summary.backend)}\n${line('Flutter', summary.flutter)}\n${statusIcon(summary.security.status)} **Security scans**\n${statusIcon(summary.infrastructure.status)} **Infrastructure scans**`;

            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;
            const comments = await github.rest.issues.listComments({ owner, repo, issue_number, per_page: 100 });
            const existing = comments.data.find((comment) => comment.body && comment.body.startsWith('<!-- quality-gates -->'));

            if (existing) {
              await github.rest.issues.updateComment({ owner, repo, comment_id: existing.id, body });
            } else {
              await github.rest.issues.createComment({ owner, repo, issue_number, body });
            }
      - name: Slack notification
        if: ${{ always() }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          BACKEND_STATUS: ${{ steps.compose.outputs.backendStatus }}
          FLUTTER_STATUS: ${{ steps.compose.outputs.flutterStatus }}
          SECURITY_STATUS: ${{ steps.compose.outputs.securityStatus }}
          INFRA_STATUS: ${{ steps.compose.outputs.infraStatus }}
          BACKEND_COVERAGE: ${{ steps.compose.outputs.backendCoverage }}
          BACKEND_THRESHOLD: ${{ steps.compose.outputs.backendThreshold }}
          FLUTTER_COVERAGE: ${{ steps.compose.outputs.flutterCoverage }}
          FLUTTER_THRESHOLD: ${{ steps.compose.outputs.flutterThreshold }}
        run: |
          python - <<'PY'
import json
import os
import sys

webhook = os.environ.get('SLACK_WEBHOOK_URL')
if not webhook:
    print('Slack webhook not configured; skipping notification.')
    sys.exit(0)

def status_icon(value: str) -> str:
    return {
        'success': '✅',
        'skipped': '⚪️',
        'cancelled': '⚪️',
        'failure': '❌'
    }.get(value, '❌')

summary_lines = []
backend_status = os.environ.get('BACKEND_STATUS', 'failure')
backend_cov = os.environ.get('BACKEND_COVERAGE')
backend_thr = os.environ.get('BACKEND_THRESHOLD', 'n/a')
if backend_cov:
    summary_lines.append(f"Backend {backend_cov}% (min {backend_thr}%) {status_icon(backend_status)}")
else:
    summary_lines.append(f"Backend {status_icon(backend_status)}")

flutter_status = os.environ.get('FLUTTER_STATUS', 'failure')
flutter_cov = os.environ.get('FLUTTER_COVERAGE')
flutter_thr = os.environ.get('FLUTTER_THRESHOLD', 'n/a')
if flutter_cov:
    summary_lines.append(f"Flutter {flutter_cov}% (min {flutter_thr}%) {status_icon(flutter_status)}")
else:
    summary_lines.append(f"Flutter {status_icon(flutter_status)}")

summary_lines.append(f"Security scans {status_icon(os.environ.get('SECURITY_STATUS', 'failure'))}")
summary_lines.append(f"Infra scans {status_icon(os.environ.get('INFRA_STATUS', 'failure'))}")

payload = {
    'text': '*Academy Quality Gates*\n' + '\n'.join(summary_lines)
}

import urllib.request

request = urllib.request.Request(
    webhook,
    data=json.dumps(payload).encode('utf-8'),
    headers={'Content-Type': 'application/json'}
)

with urllib.request.urlopen(request) as response:
    response.read()
PY

  deploy_gate:
    name: Deployment Gate Approval
    runs-on: ubuntu-latest
    needs:
      - flutter_android
      - flutter_ios
      - security_scans
      - infra_scan
      - quality_gates
    environment:
      name: staging
      url: https://staging.academy.example
    steps:
      - name: Await operator approval
        run: |
          echo "All quality gates passed. Approve deployment from the GitHub environment UI to continue rollout."

  deploy_prod:
    name: Production Deploy Packaging
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    needs: deploy_gate
    environment:
      name: production
      url: https://academy.example
    steps:
      - uses: actions/checkout@v4
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, intl
      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            ${{ env.WORKING_DIRECTORY_BACKEND }}/package-lock.json
      - name: Set up Flutter ${{ env.FLUTTER_VERSION }}
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
      - name: Prepare deploy script
        run: chmod +x tools/deploy/deploy.sh
      - name: Build release bundle
        env:
          APP_ENV: production
        run: ./tools/deploy/deploy.sh --env=production --output build/releases
      - name: Upload release bundle
        uses: actions/upload-artifact@v4
        with:
          name: production-release
          path: build/releases

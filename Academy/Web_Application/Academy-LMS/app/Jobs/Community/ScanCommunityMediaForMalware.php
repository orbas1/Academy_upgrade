<?php

declare(strict_types=1);

namespace App\Jobs\Community;

use App\Models\Community\CommunityPost;
use App\Models\UploadScan;
use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Queue\SerializesModels;
use Illuminate\Support\Arr;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;
use Symfony\Component\Process\Exception\ProcessFailedException;
use Symfony\Component\Process\Process;

class ScanCommunityMediaForMalware implements ShouldQueue
{
    use Dispatchable;
    use InteractsWithQueue;
    use Queueable;
    use SerializesModels;

    /**
     * @var array<string, mixed>
     */
    public array $payload;

    public string $queue = 'media';

    public int $tries = 1;

    public function __construct(array $payload = [])
    {
        $this->payload = $payload;
    }

    public function handle(): void
    {
        $postId = Arr::get($this->payload, 'post_id');
        $mediaItems = Arr::get($this->payload, 'media');
        $disk = Arr::get($this->payload, 'disk', config('filesystems.default'));
        $quarantine = Arr::get($this->payload, 'quarantine', storage_path('app/quarantine'));
        $scannerBinary = Arr::get($this->payload, 'scanner', config('services.clamav.binary', 'clamdscan'));

        $post = $postId ? CommunityPost::query()->find($postId) : null;
        $media = $mediaItems ?? $post?->media ?? [];

        if (empty($media)) {
            return;
        }

        $scanResults = [];

        foreach ($media as $item) {
            $path = Arr::get($item, 'path');

            if (! $path) {
                continue;
            }

            $absolutePath = Storage::disk($disk)->path($path);
            $scanRecord = UploadScan::create([
                'path' => $path,
                'absolute_path' => $absolutePath,
                'mime_type' => Arr::get($item, 'mime_type'),
                'status' => UploadScan::STATUS_PENDING,
            ]);

            if (! file_exists($absolutePath)) {
                $scanRecord->markFailed('File not found');
                $scanResults[$path] = ['status' => UploadScan::STATUS_FAILED];

                continue;
            }

            if (! $scannerBinary || ! $this->commandExists($scannerBinary)) {
                $scanRecord->markSkipped('Scanner unavailable');
                $scanResults[$path] = ['status' => UploadScan::STATUS_SKIPPED];

                continue;
            }

            $process = new Process([$scannerBinary, '--no-summary', $absolutePath]);

            try {
                $process->mustRun();
                $scanRecord->markClean();
                $scanResults[$path] = ['status' => UploadScan::STATUS_CLEAN];
            } catch (ProcessFailedException $exception) {
                $exitCode = $process->getExitCode();

                if ($exitCode === 1) {
                    $quarantinedPath = $scanRecord->moveToQuarantine($quarantine);
                    $scanRecord->markInfected($exception->getMessage(), $quarantinedPath);
                    $scanResults[$path] = [
                        'status' => UploadScan::STATUS_INFECTED,
                        'quarantine_path' => $quarantinedPath,
                    ];
                } else {
                    $scanRecord->markFailed($exception->getMessage());
                    $scanResults[$path] = ['status' => UploadScan::STATUS_FAILED];
                }

                Log::warning('community.media.scan.alert', [
                    'path' => $path,
                    'exit_code' => $exitCode,
                    'message' => $exception->getMessage(),
                ]);
            }
        }

        if ($post) {
            $metadata = $post->metadata ?? [];
            $metadata['security'] = array_merge($metadata['security'] ?? [], ['media' => $scanResults]);
            $post->forceFill(['metadata' => $metadata])->save();
        }
    }

    protected function commandExists(string $binary): bool
    {
        $process = Process::fromShellCommandline(sprintf('command -v %s', escapeshellarg($binary)));
        $process->run();

        return $process->isSuccessful();
    }
}
